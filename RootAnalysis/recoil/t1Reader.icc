// ======================================================================
// -- This file contains general setup stuff
// ======================================================================

// ----------------------------------------------------------------------
t1Reader::t1Reader(TChain *chain, TString evtClassName) {
  cout << "==> t1Reader: constructor..." << endl;
  if (chain == 0) {
    cout << "You need to pass a chain!" << endl;
  }
  fpChain       = chain;
  fChainEntries = chain->GetEntries();
  fIgnoreJson   = false;
  init(evtClassName);
}

// ----------------------------------------------------------------------
void t1Reader::init(TString evtClassName) {
  fpEvt = new TAna01Event(0);
  cout << "==> t1Reader: init ..." << fpEvt << endl;
  fpChain->SetBranchAddress(evtClassName, &fpEvt);
  initVariables();
}

// ----------------------------------------------------------------------
t1Reader::~t1Reader() {
  cout << "==> t1Reader: destructor ..." << endl;
  if (!fpChain) return;
  delete fpChain->GetCurrentFile();
}

// ----------------------------------------------------------------------
void t1Reader::openHistFile(TString filename) {
  fpHistFile = new TFile(filename.Data(), "RECREATE");
  fpHistFile->cd();
  cout << "==> t1Reader: Opened " << fpHistFile->GetName() << endl;
}

// ----------------------------------------------------------------------
void t1Reader::closeHistFile() {
  cout << "==> t1Reader: Writing " << fpHistFile->GetName() << endl;
  // fpHistFile->ls();
  fpHistFile->cd();
  fpHistFile->Write();
  fpHistFile->Close();
  delete fpHistFile;

}

// --------------------------------------------------------------------------------------------------
void t1Reader::readCuts(TString filename, int dump) {
  char  buffer[200];
  fCutFile = filename;
  if (dump) cout << "==> t1Reader: Reading " << fCutFile.Data() << " for cut settings" << endl;
  sprintf(buffer, "%s", fCutFile.Data());
  ifstream is(buffer);
  char CutName[100];
  float CutValue;
  int ok(0);

  TString fn(fCutFile.Data());

  if (dump) {
    cout << "====================================" << endl;
    cout << "==> t1Reader: Cut file  " << fCutFile.Data() << endl;
    cout << "------------------------------------" << endl;
  }

  TH1D *hcuts = new TH1D("hcuts", "", 1000, 0., 1000.);
  hcuts->GetXaxis()->SetBinLabel(1, fn.Data());
  int ibin;

  while (is.getline(buffer, 200, '\n')) {
    ok = 0;
    if (buffer[0] == '#') {continue;}
    if (buffer[0] == '/') {continue;}
    sscanf(buffer, "%s %f", CutName, &CutValue);

    if (!strcmp(CutName, "TYPE")) {
      TYPE = int(CutValue); ok = 1;
      if (dump) cout << "TYPE:           " << TYPE << endl;
    }

    if (!strcmp(CutName, "JSON")) {
      char json[1000]; ok = 1;
      sscanf(buffer, "%s %s", CutName, json);
      JSONFILE = string(json); ok = 1;
      if (dump) cout << "JSON FILE:           " << JSONFILE << endl;
      ibin = 3;
      hcuts->GetXaxis()->SetBinLabel(ibin, Form("%s :: JSON File :: %s", CutName, JSONFILE.c_str()));
    }

    if (!strcmp(CutName, "LUMI")) {
      char lumi[1000]; ok = 1;
      sscanf(buffer, "%s %s", CutName, lumi);
      LUMIFILE = string(lumi); ok = 1;
      if (dump) cout << "LUMI FILE:           " << LUMIFILE << endl;
      ibin = 3;
      hcuts->GetXaxis()->SetBinLabel(ibin, Form("%s :: LUMI File :: %s", CutName, LUMIFILE.c_str()));
    }

    if (!ok) cout << "==> t1Reader: ERROR: Don't know about variable " << CutName << endl;
  }

  if (dump)  cout << "------------------------------------" << endl;
}


// ----------------------------------------------------------------------
int t1Reader::loop(int nevents, int start) {
  int nb = 0, maxEvents(0);

  cout << "==> t1Reader: Chain has a total of " << fChainEntries << " events" << endl;

  // -- Setup for restricted running (not yet foolproof, i.e. bugfree)
  if (nevents < 0) {
    maxEvents = fChainEntries;
  } else {
    cout << "==> t1Reader: Running over " << nevents << " events" << endl;
    maxEvents = nevents;
  }
  if (start < 0) {
    start = 0;
  } else {
    cout << "==> t1Reader: Starting at event " << start << endl;
    if (maxEvents >  fChainEntries) {
      cout << "==> t1Reader: Requested to run until event " << maxEvents << ", but will run only to end of chain at ";
      maxEvents = fChainEntries;
      cout << maxEvents << endl;
    } else {
      cout << "==> t1Reader: Requested to run until event " << maxEvents << endl;
    }
  }

  // -- The main loop
  int step(50000);
  if (maxEvents < 1000000) step = 10000;
  if (maxEvents < 100000)  step = 1000;
  if (maxEvents < 10000)   step = 500;
  if (maxEvents < 1000)    step = 100;

  int treeNumber(0), oldTreeNumber(-1);
  fpChain->GetFile(); // without this, treeNumber initially will be -1.
  for (int jEvent = start; jEvent < maxEvents; ++jEvent) {
    treeNumber = fpChain->GetTreeNumber();
    if (treeNumber != oldTreeNumber) {
      cout << "    " << Form("      %8d", jEvent) << " " << fpChain->GetFile()->GetName() << endl;
      oldTreeNumber = treeNumber;
    }

    if (jEvent%step == 0) cout << Form(" .. Event %8d", jEvent);

    fChainEvent = jEvent;
    fpEvt->Clear();
    nb += fpChain->GetEvent(jEvent);

    fEvt = static_cast<long int>(fpEvt->fEventNumber);
    fRun = static_cast<long int>(fpEvt->fRunNumber);
    fLS  = fpEvt->fLumiSection;

    if (jEvent%step == 0) {
      TTimeStamp ts;
      cout  << " (run: " << Form("%8ld", fRun)
	    << ", event: " << Form("%10ld", fEvt)
	    << ", ls: " << Form("%5d", fLS)
	    << ", time now: " << ts.AsString("lc")
	    << ")" << endl;
    }

    eventProcessing();
  }
  return 0;

}
