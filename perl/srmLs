#!/usr/bin/env perl

# ----------------------------------------------------------------------
#
# Usage: srmLs -x URI -p pattern [-s 13362] [-c] [-C] [-b basename -n 10G]
# -----
#          -c  create output suitable for chain files
#          -b  combine files into chainbasename_i as long as its size < $opt_n
#          -p  pattern to search for
#
# Examples:  $BMMBASE/perl/srmLs -x /store/user/ursl/bmm4/cmsRun/v01 -p 2016
#            $BMMBASE/perl/srmLs /scratch/ursl/store/user/ursl/bmm4/small/*
#
# History: 2010/04/29 First shot
#          2010/05/03 Bug fix
#          2010/10/18 Produce chains with maximum size
#          2011/05/17 -C to produce only /store/... lists
#          2013/05/07 migrate to lcg-ls
#          2013/05/27 removed forgotten srmls
#          2016/06/13 migrate to gfal-ls
#          2016/07/08 migrate to xrootd instead of dcap
#          2016/07/08 migrate to xrdfs instead of gfal-ls
#          2018/02/28 add even/odd options
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

#$cprefix = "dcap://t3se01.psi.ch:22125/pnfs/psi.ch/cms/trivcat";
$cprefix = "root://t3dcachedb.psi.ch:1094/pnfs/psi.ch/cms/trivcat";

# -- Get arguments
use Getopt::Std;
getopts('b:cCen:op:x:s:');

# -- shortcut for nfs-mounted multiple directories:
if ($#ARGV > -1) {
    @filelist = ();
    for ($i = 0; $i <= $#ARGV; ++$i) {
	#print "look at $ARGV[$i]\n";
	$dir = $ARGV[$i];
	($bla, $dir) = split(/\/store\//, $ARGV[$i]);
	$dir = "/store/" . $dir;
	#print " -> $dir\n";
	@flist = ();
	@flist = `xrdfs t3dcachedb03.psi.ch ls -l -u //pnfs/psi.ch/cms/trivcat$dir`;
	push(@filelist, @flist);
    }
    if ($opt_e) {
	@filelist = &evenFiles(@filelist);
    }
    if ($opt_o) {
	@filelist = &oddFiles(@filelist);
    }
    foreach $line (@filelist) {
	($bla, $file) = split(/\/store\//, $line);
	$file = "/store/" . $file;;
	print "$file";
    }
    exit(0);
}



# -- cross check for chain production
if ($opt_n && !$opt_b) {die "provide a maximum size if requesting split chain files\n";}
if ($opt_b && !$opt_n) {die "provide a base filename if requesting split chain files\n";}

# -- replace characters with numbers
if ($opt_n  =~ /M/i) {$opt_n =~ s/M/000000/ig;}
if ($opt_n  =~ /G/i) {$opt_n =~ s/G/000000000/ig;}

$prefix = substr($opt_x, 0, index($opt_x, '/store'));
$postfix = substr($opt_x, index($opt_x, '/store'));

# -- first version with srmls
#@filelist = `srmls $opt_x`;

# -- migration to lcg-ls
# assume printout of the following form:
# -rw-rw-r--   1     2     2 1581348806               ONLINE /pnfs/psi.ch/cms/trivcat/store/user/bstomumu/v16/bla.root
#	* Checksum: 364c78ef (adler32)
#	* Space tokens: 7522060
#@filelist = `lcg-ls -l $opt_x`;
#@filelist = grep(!/Checksum/, @filelist);
#@filelist = grep(!/Space tokens/, @filelist);

# -- migration to gfal-ls
# assume printout of the following form:
#-rw-r--r--   1 2     2       2754352 Jun  3 20:53 BdToKPi_step3-59971.root
#@filelist = `gfal-ls -l $opt_x`;
#@filelist = grep(s/\ {1,99}/ /g, @filelist);
#@filelist = grep(s/\t//g, @filelist);
#foreach $line (@filelist) {
#    @parts = split(/ /, $line);
#    $line = $parts[4] . " " . $postfix . "/" . $parts[8];
#}


# -- migration to xrdfs
# assume printout of the following form:
#-rw- 2016-06-16 08:40:04   894752476 root://192.33.123.26:1094///pnfs/psi.ch/cms/trivcat/store/user/ursl/bmm4/cmsRun/v01/dstarCharmonium2016B/dstar-prompt-Run2016B-Charmonium__Run2016B-PromptReco-v01-0274998-0007.root
#xrdfs t3dcachedb03.psi.ch ls -l -u //pnfs/psi.ch/cms/trivcat/store/user/$USER/
@filelist = `xrdfs t3dcachedb03.psi.ch ls -l -u //pnfs/psi.ch/cms/trivcat$opt_x`;
@filelist = grep(s/\ {1,99}/ /g, @filelist);
if ($opt_e) {
    @filelist = &evenFiles(@filelist);
}
if ($opt_o) {
    @filelist = &oddFiles(@filelist);
}

foreach $line (@filelist) {
    @parts = split(/ /, $line);
    $line = substr($line, index($line, '/store'));
    $line = $parts[3] . " " . $line;
}

my $sum = 0;
my $fidx = 0;
$filename = "$opt_b"."_$fidx";
if ($opt_b) {open(OUT, ">$filename") || die "Cannot open $filename\n";}

foreach $f (@filelist) {
    chop($f);
    $f =~ s/^\ *//g;
    if (($opt_p eq "") && !($f =~ /\.root/)) {next; } # skip empty lines if no pattern is provided
    if (($opt_p eq "") || ($f =~ /$opt_p/)) {
	# -- search for pattern
	($size, $file) = split(/ /, $f, 2);
	$lfn = substr($file, rindex($file, '/store')+1, length($file));
	$ffn = $prefix."/".$lfn;
	# print "lfn: $lfn -> $size\n";
	if ($opt_c) {
	    print "$cprefix/$lfn\n";
	# } elsif ($opt_p && !$opt_s) {
	} elsif ($opt_C) {
	    print "/$lfn\n";
	} elsif (!$opt_s) {
	    print "$size $ffn\n";
	}

	# -- determine size
	if ($opt_s) {
	    if ($size < $opt_s) {
		print "$size $ffn\n";
	    }
	}

	if ($opt_b) {
	    print "sum = $sum, adding $size, for a total of ";
	    $sum += $size;
	    print "$sum\n";
	    if ($sum < $opt_n) {
		print OUT "$cprefix/$lfn\n";
	    } else {
		$sum = $size;
		close (OUT);
		$fidx++;
		$filename = "$opt_b"."_$fidx";
		open(OUT, ">$filename") || die "Cannot open $filename\n";
		print OUT "$cprefix/$lfn\n";
	    }
	}

    }
}


# ----------------------------------------------------------------------
sub oddFiles() {
    (@myfiles) = @_;
    my @returnfiles = ();
    if ($#myfiles > 0) {
	foreach $file (@myfiles) {
	    $file =~ /.*-([0-9]{1,6})\.root/;
	    if ($1%2 == 1) {
		push(@returnfiles, $file);
		# print "$file is odd\n";
	    }
	}
    } else {
	@returnfiles = @myfiles;
    }
    return @returnfiles;

}

# ----------------------------------------------------------------------
sub evenFiles() {
    (@myfiles) = @_;
    my @returnfiles = ();
    if ($#myfiles > 0) {
	foreach $file (@myfiles) {
	    $file =~ /.*-([0-9]{1,6})\.root/;
	    if ($1%2 == 0) {
		push(@returnfiles, $file);
		# print "$file is even\n";
	    }
	}
    } else {
	@returnfiles = @myfiles;
    }
    return @returnfiles;
}
