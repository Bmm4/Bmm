#!/usr/bin/env perl

# Usage:       filterEff [-c] dir*
# ------
#              -c count events (for 2011 MC production, where the filter efficiency is not printed)
#
#              determine filter efficiency from all directories and *.sge.log files in there
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

use Getopt::Std;
getopts('c');

my $fileglob = "sge.log";
my $pattern = "Filter efficiency (event-level)= ";

my $sel = 0;
my $all = 0;
my $tim = 0;
my $siz = 0;
my $isel = 0;
my $iall = 0;
my $line;
foreach $dir (@ARGV) {
    $isel = 0;
    $iall = 0;
    $line = "";
    $line = `/bin/grep 'run: This is the end, my friend' $dir/*$fileglob`;
    chop($line);
    if ($line eq "") {
	print "job not finished: $dir\n";
	next;
    }
    if (!$opt_c) {
	$line = `/bin/grep '$pattern' $dir/*$fileglob`;
	chop($line);
	if ($line eq "") {next;}
	($rest, $numbers, $rest2) = split(/=/, $line, 3);
	$numbers =~ /\(([0-9]*)\)\s*\/\s*\(([0-9,e,\.,\+]*)\)/;
	$isel = $1;
	$iall = $2;
	if ($1 > 0 && $2 > 0) {
	} else {
	    print "ignore $dir: sel = $1, all = $2\n";
	    next;
	}
    } else {
	@lines = `/bin/grep 'Begin processing the' $dir/*$fileglob`;
	$allLine = `/bin/grep 'All included subprocesses' $dir/*$fileglob`;
	chop($lines[$#lines]);
	($rel, $bla) = split(/ record. Run/, $lines[$#lines], 2);
	$rel =~ s/Begin processing the //;
	$rel =~ s/st//g;
	$rel =~ s/nd//g;
	$rel =~ s/rd//g;
	$rel =~ s/th//g;

	chop($allLine);
	$allLine =~ /I\s*0 All included subprocesses \s*I\s*([0-9]*)/;
	$isel = $rel;
	$iall = $1;
	if ($rel > 0 && $1 > 0)  {
	} else {
	    print "ignore $dir: sel = $rel, all = $1\n";
	    next;
	}
    }

    $sel += $isel;
    $all += $iall;

    @times = `/bin/grep 'Begin processing the' $dir/*$fileglob`;
    ($rest, $start) = split(/LumiSection 1 at/, $times[0], 2);
    ($rest, $stop) = split(/LumiSection 1 at/, $times[$#times], 2);
    chop($start);
    chop($stop);

    #    print "start: $start, stop: $stop\n";
    $runtime = &duration($start, $stop);
    $tim += $runtime;

    $fsize = `grep 'Size:' $dir/*$fileglob`;
    $fsize =~ /\s* Size: ([0-9]*) bytes .*/;
    $fsize = $1;
    $siz += $fsize;

    $err  = sqrt((($sel+1)*($all-$sel+1))/(($all+3)*($all+2)*($all+2)));
    $ierr = sqrt((($isel+1)*($iall-$isel+1))/(($iall+3)*($iall+2)*($iall+2)));
    printf("%s eff: %f +/- %f (cumulative: %f +/- %f)\n", $dir, $isel/$iall, $ierr, $sel/$all, $err);



}

#printf("filter efficiency: %f = %d/%d (=%e)\n", $sel/$all, $sel, $all, $sel/$all);
$err = sqrt((($sel+1)*($all-$sel+1))/(($all+3)*($all+2)*($all+2)));
printf("%s eff: %f +/- %f (%s) time=%d size=%d\n", $dir, $sel/$all, $err, $line, $runtime, $fsize);
printf("%s eff: %e +/- %e (%s) time=%d size=%d\n", $dir, $sel/$all, $err, $line, $runtime, $fsize);
printf("time/event %f = %d/%d \n", $tim/$sel, $tim, $sel);
printf("event size %f MB = %d/%d \n", $siz/$sel/1000000, $siz, $sel);


# ----------------------------------------------------------------------
sub duration {
    ($lstart, $lstop) = @_;
    $lstart =~ s/^\s//g;
    $lstop =~ s/^\s//g;
    ($bla, $tstart, $bla) = split(/\ /, $lstart, 3);
    ($bla, $tstop, $bla) = split(/\ /, $lstop, 3);

    ($hour, $min, $sec) = split(/:/, $tstart, 3);
    $sstart = $hour*3600 + $min*60 +$sec;

    ($hour, $min, $sec) = split(/:/, $tstop, 3);
    $sstop = $hour*3600 + $min*60 +$sec;

    if ($sstart > $sstop) {
	$deltaT = 86400  + $sstop - $sstart;
    } else {
	$deltaT = $sstop - $sstart;
    }
    #print "hallo $tstart .. $tstop -> $sstart .. $sstop -> $deltaT \n";
    return $deltaT;
}
