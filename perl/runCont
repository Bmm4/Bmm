#!/usr/bin/perl

# ----------------------------------------------------------------------
#
# runCont  run in the background and allow for continuous job submission for short jobs
# =======
#
# Usage examples
# ==============
#
# $BMMBASE/perl/runCont -n 200 -c '/bin/tcsh  ' c-* >& runCont.log &
#
#
# Create the jobs files based on a template c-20 as follows:
#
# do -f 21 -l 25 -c 'cp c-20 c-$n; perl -pi -e "s/BuToJpsiKp20/BuToJpsiKp$n/g" c-$n'
#
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

use lib "$ENV{BMMBASE}/perl/modules/Tie-IxHash-1.23/lib";
use Tie::IxHash;

use Getopt::Std;
getopts('c:dn:w:');


my $USER = $ENV{USER};
my $siesta = 600;
@jobs = @ARGV;

print "runCont($$): @ARGV\n";

foreach $job (@jobs) {
    if (-e "STOP.$$") {
	unlink("STOP.$$");
	print "runCont($$): saw STOP.$$ at $datum, exit\n";
	exit(0);
    }
    while (-e "WAIT.$$") {
	$datum = `date`;
	chop($datum);
	print "runCont($$): watching WAIT.$$ at $datum\n";
	sleep(3600);
    }
    if ($opt_n) {
	$njobs = &countPending;
	$datum = `date`;
	chop($datum);
	print "runCont($$): $njobs jobs waiting at $datum\n";
	while ($njobs > $opt_n) {
	    sleep($siesta);
	    # -- bail out in case of STOP file
	    if (-e "STOP.$$") {
		unlink("STOP.$$");
		print "runCont($$): saw STOP.$$ at $datum, exit\n";
		exit(0);
	    }
	    # -- wait 1h in case of WAIT file
	    while (-e "WAIT.$$") {
		$datum = `date`;
		chop($datum);
		print "runCont($$): watching WAIT.$$ at $datum\n";
		sleep(3600);
	    }

	    $njobs = &countPending;
	    $datum = `date`;
	    chop($datum);
	    print "runCont($$): $njobs jobs waiting at $datum\n";
	}
    }

    if ($opt_d) {
	print "$opt_c $job\n";
    } else {
	print "runCont($$): submitting $opt_c $job\n";
	system("$opt_c $job");
    }

    if ($opt_w) {
	sleep($opt_w);
    }

}

# ----------------------------------------------------------------------
sub countPending() {
    $n = `qstat -s p -u $USER | wc -l `;
    chop($n);
    # print "n = ->$n<- \n";
    return $n;
}
