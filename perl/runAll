#!/usr/bin/perl

# ----------------------------------------------------------------------
# Usage examples
# ==============
#
# -- generate python files
#  cd .../Bmm/CmsswAnalysis/test/bmm4/jobs/v01; $BMMBASE/perl/runAll -p
#  cd .../Bmm/CmsswAnalysis/test/bmm4/jobs/v01; $BMMBASE/perl/runAll -p -s Summer15_private
#
# -- submit cmsRun jobs
#  cd .../Bmm/CmsswAnalysis/test/bmm4/jobs/v01; $BMMBASE/perl/runAll -t $BMMBASE../../150826bmm4.tar.gz -s Summer15_private
#
# -- generate checked chains and split them
#  cd .../Bmm/RootAnalysis/macros/chains/v01; $BMMBASE/perl/runAll -p
#  cd .../Bmm/RootAnalysis/macros/chains/v01; $BMMBASE/perl/runAll -p -s bmm-v01-Run2015B__Charmonium__PromptReco-v1
#
# -- submit runBmm jobs
#  cd .../Bmm/RootAnalysis/macros/chains/v01; $BMMBASE/perl/runAll -t $BMMBASE/../../150903bmm4.tar.gz
#  cd .../Bmm/RootAnalysis/macros/chains/v01; $BMMBASE/perl/runAll -h
#  cd .../Bmm/RootAnalysis/macros/chains/v01; $BMMBASE/perl/runAll -y -s bmmCharmonium2016
#
# -- collect crashed jobs and run in background locally
#  cd .../Bmm/RootAnalysis/macros/chains/v01; $BMMBASE/perl/runAll -t $BMMBASE/../../150903bmm4.tar.gz -C -q 'local -b'
#
# -- submit runPlot jobs
#  cd .../Bmm/RootAnalysis/macros/chains/runPlot; $BMMBASE/perl/runAll -t $BMMBASE/../../150903bmm4.tar.gz -x '-p overlays -m dbx' -s 423
#
# -- produce output suited for runCont:
#  cd .../Bmm/CmsswAnalysis/test/bmm4/jobs/v11; $BMMBASE/perl/runAll -t $BMMBASE../../150826bmm4.tar.gz -s Summer15_private -e -d > allJobs
#  $BMMBASE/perl/runCont -n 100 allJobs > & runCont-allJobs.log &
# -- cleanup old jobs.list files:
#  $BMMBASE/perl/runAll -b 2018/02/02 -s BuToJpsiK-2016 -m
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

use lib "$ENV{BMMBASE}/perl/modules/Tie-IxHash-1.23/lib";
use Tie::IxHash;

use Getopt::Std;
getopts('b:Ccdehi:lmo:pq:s:t:w:x:y');

my $dir        = ".";
if ($opt_o) {
    $dir = $opt_o;
}

if (!$opt_q) {
    $opt_q = "-m batch -q all.q";
} else {
    if (!($opt_q =~ "local")) {
	$opt_q = "-m batch -q $opt_q";
    } else {
	$opt_q = "-m $opt_q";
    }
}

if (!$opt_C) {
    $opt_C = " ";
} else {
    $opt_C = " -C ";
}

my $jobslist = "jobs.list";
if ($opt_i) {
    $jobslist = $opt_i;
}

my %jobs;

my $BMMBASE = $ENV{BMMBASE};
my $USER = $ENV{USER};
my $SCRATCH = "nada";

# ----------------------------------------------------------------------
# -- read in (and eval) configuration:
#      $runCommand
#      %jobs
#      %catalogs
open(IN, "$dir/runAll.jobs") || die "Cannot read $dir/runAll.jobs";
while (<IN>) {
    $gProgram .= "  ".$_;
}
eval $gProgram;

# -- BEFORE option: remove old job submission data from jobs.list files
if ($opt_b) {
    print "cleaning out jobs with $opt_b\n";
    foreach $j (keys %catalogs) {
	my $chdired = 0;
	if ($opt_s && !($j =~ /$opt_s/)) {next;}
	print "==> Look at $j: ";
	if (-d "jobs") {
	    $chdired = 1;
	    chdir("jobs");
	} else {
	    if (-d "$j") {
		$chdired = 1;
		chdir("$j");
	    }
	}

	if (!$opt_d) {
	    my $removedLines = 0;
	    if (-e "$jobslist") {
		open(IN, $jobslist) || die "Cannot find file $joblist\n";
	    } else {
		print "\n no such file: $j/$jobslist\n";
		next;
	    }
	    open(OUT, ">$jobslist.new") || die "Cannot find file $joblist.new\n";
	    while(<IN>) {
		next if (/\#\#\#/);
		# -- parse one job: one URL/sge and one additional line with information
		my $url  = $_;   chop($url);
		my $line = <IN>; chop($line);
		($yyyy, $mm, $dd) = ($line =~ /(\d+)\/(\d+)\/(\d+)/);
		$date = "$yyyy/$mm/$dd";
		if ($date le $opt_b) {
		    # print ":::rm $line ($date le $opt_b)\n";
		    $removedLines++;
		} else {
		    # print ":keep $line ($date ge $opt_b)\n";
		    print OUT "$url\n";
		    print OUT "$line\n";
		}
	    }
	    close(IN);
	    close(OUT);
	    ($suffix = $opt_b) =~ s/\//-/g;
	    if ($removedLines > 0) {
		rename("$jobslist", "$jobslist-$suffix");
	    }
	    print " removed $removedLines lines\n";
	    rename("$jobslist.new", "$jobslist");
	}
	if (1 == $chdired) {chdir("..");}
    }
    exit(0);
}


# -- merge rootfiles (this results in, e.g.,  specific *2016?-v01.root rootfiles, i.e. split according to eras
if ($opt_h) {
    foreach $j (keys %jobs) {
	if ($opt_s && !($j =~ /$opt_s/)) {next;}
	$command = &srmHadd($j);
	if ($opt_C ne " ") {
	    &dumpMacro();
	    system(" $ENV{ROOTSYS}/bin/root -n -l -b -q 'checkFile.C(\"$SCRATCH/$j.root\")' ");
	    if (checkMergedRootFile("$SCRATCH/$j.root")) {
	    } else {
		print "  merge again: ";
		print "$command\n";
		system("$command");
	    }
	    next;
	}
	if (!$opt_d) {
	    print "$command\n";
	    system("$command");
	} else {
	    print "$command\n";
	}
    }
    exit(0);
}

# -- combine rootfiles into year
if ($opt_y) {
    foreach $j (keys %combine) {
	if ($opt_s && !($j =~ /$opt_s/)) {next;}
	$command = "$combine{$j}";
	print "$command\n";
	if (!$opt_d) {
	    system("$command");
	}
    }
    exit(0);
}


# -- create (split) files. They ALWAYS go into a subdirectory
if ($opt_p) {
    foreach $j (keys %catalogs) {
	if ($opt_s && !($j =~ /$opt_s/)) {next;}
	if (-d "jobs") {
	    chdir("jobs");
	} else {
	    if (-d "$j") {
		chdir("$j");
	    } else {
		mkdir("$j");
		chdir("$j");
	    }
	}
	print "$catalogs{$j}\n";
	if (!$opt_d) {
	    system("$catalogs{$j}");
	}
	chdir("..");
    }

    exit(0);
}


# -- monSge
if ($opt_m) {
    my $nNOK = 0;
    my $nRUN = 0;
    foreach $j (keys %catalogs) {
	my $chdired = 0;
	if ($opt_s && !($j =~ /$opt_s/)) {next;}
	if (-d "jobs") {
	    $chdired = 1;
	    chdir("jobs");
	} else {
	    print "$j\n";
	    if (-d "$j") {
		$chdired = 1;
		chdir("$j");
	    }
	}

	if (!$opt_d) {
	    system("$BMMBASE/perl/monSge");
	    # -- now count NOK files in all relevant tmp-* directories
	    open(IN, $jobslist) || die "Cannot find file $joblist with grid jobs\n";
	    while(<IN>) {
		next if (/\#\#\#/);
		# -- parse one job: one URL/sge and one additional line with information
		my $url  = $_;   chop($url);
		my $line = <IN>; chop($line);

		# -- fixed screwed jobs.list input
		while ($line =~ /https/ || $line =~ /sge/) {
		    $url = $line;
		    $line = <IN>; chop($line);
		}

		if ($url =~ /https/) {next;}

		if ($opt_v) {print "$line\n";}
		$line =~ s/\# //;
		($machine, $date, $time, $dir, $jname, $sgeNumber) = split(/ /, $line);
		my $pwd = `pwd`; chop($pwd);
		my $mdir = $dir;
		$mdir =~ s%$pwd/%%;

		if (-e "$mdir/NOK") {
		    $nNOK++;
		}
		if (!(-e "$mdir/NOK") && !(-e "$mdir/OK")) {
		    $nRUN++;
		}
	    }
	}
	if (1 == $chdired) {chdir("..");}
    }

    print "A total of $nNOK jobs had problems\n";
    print "A total of $nRUN jobs still running\n";
    exit(0);

}

# ----------------------------------------------------------------------
# -- submit the jobs
foreach $j (keys %jobs) {
    if ($opt_s && !($j =~ /$opt_s/)) {
	# print "skip: $j\n";
	next;
    }
    if ($opt_c) {
	$jobs{$j} =~/-o\s*(.*)\s-/; $rootfile = $1;
	if (-e $rootfile) {
	    $size = -s $rootfile;
	    print "$rootfile with size $size exists already, do not resubmit \n";
	    if ($size > 1000) {
		next;
	    }
	} else {
	    print "->$rootfile<- not found\n";
	    # do nothing and proceed with submission
	}
    }
    if ($opt_l) {
	$jobs{$j} =~ s/\|\& tee/>/g;
	# FIXME: may be broken with redefinition of opt_x!
	$command = "$runCommand $jobs{$j} $opt_x >>$dir/runAll.log";
	$command = "$runCommand $jobs{$j} $opt_x";
	print "$command\n";
	if (!$opt_d) {
	    system($command);
	}
    } else {
	# -- for CONDOR setups:
	if (0) {
	    &createCondorScript($j);
	    $command = "export JOB='$runCommand $jobs{$j} $opt_x'; export LOG=$j; condor_submit condor-$j.txt";
	    print "$command\n";
	    if (!$opt_d) {
		system($command);
		unlink("condor-$j.txt");
	    }
	}

	# -- for SGE at PSI
	if (1) {
	    print "$jobs{$j}\n";
	    if (!$opt_d) {
		print "DBX HELLO +>$jobs{$j}<+ \n";
		system("$jobs{$j}");
	    }
	}
    }
}

# ----------------------------------------------------------------------
sub createCondorScript {
    ($log) = @_;
    open(OUT, ">condor-$j.txt")  || die "Cannot open condor-$j.txt\n";
    print OUT <<"EOF";
executable  =  condorRunLq
universe    =  vanilla
log         =  /STORE/LQ/ursl/$j.condor
output      =  /STORE/LQ/ursl/$j.log
initialdir  =  /users/ursl/lq/lq0
getenv      =  True
queue
EOF
close OUT;
}


# ----------------------------------------------------------------------
sub checkMergedRootFile {
    ($rfile) = @_;
    print "checking $rfile\n";
    if (!(-e "$rfile")) {
	print "TODO: $rfile does not exist\n";
	return 0;
    }

    return 1;
}


# ----------------------------------------------------------------------
sub dumpMacro() {

    open(FH, ">checkFile.C") || die "Cannot open checkFile.C\n";
    print FH <<"EOF";

#include <iostream>
#include <TString.h>

void checkFile(const char *filename) {
  char buffer[2000];
  char meta[2000];

  TFile *f = TFile::Open(filename);

  if (f) {
    if (f->TestBit(TFile::kRecovered)) {
      cout << "==> recovered file: " << Form("/bin/rm %s", filename) << endl;
      system(Form("/bin/rm %s", filename));
    }
    f->Close();
  }
}

EOF
}

# ----------------------------------------------------------------------
sub addToJobs() {
    (my $ldir) = @_;
    if (! -d $ldir) {
	return;
    }
    if ($opt_e) {
	if ($opt_s && !($ldir =~ /$opt_s/)) {
	    return;
	}
	@pyfiles = &listAllPyFiles($ldir);
	foreach $pyfile (@pyfiles) {
	    $job =$ldir.":".$pyfile;
#	    print "$job\n";
	    $jobs{$job}  = "cd $ldir && ".&runCommand." $pyfile && cd - ";
	}
    } else {
	$jobs{$ldir}   = "cd $ldir && ".&runCommand." *.py && cd - ";
    }
}


# ----------------------------------------------------------------------
sub listAllPyFiles() {
    (my $ldir) = @_;
    opendir(DIR, $ldir) or die $!;
    my @pylist = ();
    while (my $dir = readdir(DIR)) {
	if (!($dir =~/\.py/)) {next;}
	if ($opt_C ne " ") {
	    ($tmpdir = $dir) =~ s/\.py//;
	    $tmpdir = "tmp-" . $tmpdir;
	    if (!-d "$ldir/$tmpdir") {
		next;
	    }
	    if (-e "$ldir/$tmpdir/NOK") {
		push(@pylist, $dir);
		next;
	    }
	} else {
	    push(@pylist, $dir);
	}
    }
    close(DIR);
    return @pylist;
}


# ----------------------------------------------------------------------
sub addModeToJobs() {
    (my $ldir, $otherArgs) = @_;
    if (! -d $ldir) {
	return;
    }
    if ($opt_e) {
	if ($opt_s && !($ldir =~ /$opt_s/)) {
	    return;
	}
	# print "hallo: $ldir, $otherArgs\n";
	@splitchains = &listAllChains($ldir);
	foreach $chain (@splitchains) {
	    $job = $ldir.":".$chain;
	    # print "$job\n";
	    $jobs{$job}  = "cd $ldir && ".&runCommand." $otherArgs $chain && cd - ";
	}
    } else {
	$job = $ldir;
	$jobs{$job}  = "cd $ldir && ".&runCommand." $otherArgs c$ldir-* && cd - ";
    }
}


# ----------------------------------------------------------------------
sub listAllChains() {
    (my $ldir) = @_;
    opendir(DIR, $ldir) or die $!;
    my @chainlist = ();
    while (my $dir = readdir(DIR)) {
	if (!($dir =~/^c.*-[0-9]{2,4}$/)) {next;}
	# print "listAllChains: $dir\n";
	if ($opt_C ne " ") {
	    $tmpdir = "tmp-" . $dir;
	    if (!-d "$ldir/$tmpdir") {
		next;
	    }
	    if (-e "$ldir/$tmpdir/NOK") {
		push(@chainlist, $dir);
		next;
	    }
	} else {
	    # print " pushing $dir\n";
	    push(@chainlist, $dir);
	}
    }
    close(DIR);
    # print "chainlist has ", $#chainlist+1, " entries\n";
    return @chainlist;
}
